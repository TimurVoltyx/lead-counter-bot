import os
import asyncio
import logging
from collections import deque
from datetime import datetime
from urllib.parse import urlparse

import pytz
from telegram import Update
from telegram.ext import (
    Application,
    ApplicationBuilder,
    AIORateLimiter,
    CommandHandler,
    MessageHandler,
    ContextTypes,
    filters,
)

# -------------------- –õ–û–ì–ò --------------------
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s | %(levelname)s | %(name)s | %(message)s",
)
log = logging.getLogger("lead-counter-bot")

# -------------------- ENV --------------------
BOT_TOKEN = os.getenv("BOT_TOKEN", "").strip()
CHAT_ID = int(os.getenv("CHAT_ID", "0").strip() or "0")
TZ_NAME = os.getenv("TIMEZONE", "America/Los_Angeles").strip()
WEBHOOK_URL = os.getenv("WEBHOOK_URL", "").strip()  # –Ω–∞–ø—Ä–∏–º–µ—Ä: https://lead-counter-bot-production.up.railway.app/hook-1111

if not BOT_TOKEN:
    raise RuntimeError("BOT_TOKEN is required")
if not CHAT_ID:
    raise RuntimeError("CHAT_ID is required")

try:
    TZ = pytz.timezone(TZ_NAME)
except Exception:
    TZ = pytz.timezone("America/Los_Angeles")

def now_local() -> datetime:
    return datetime.now(TZ)

# –í—ã—Ç–∞—Å–∫–∏–≤–∞–µ–º –ø—É—Ç—å –≤–µ–±—Ö—É–∫–∞ –∏–∑ WEBHOOK_URL; –µ—Å–ª–∏ –Ω–µ—Ç ‚Äî –∏—Å–ø–æ–ª—å–∑—É–µ–º /hook-1111
if WEBHOOK_URL:
    HOOK_PATH = urlparse(WEBHOOK_URL).path or "/hook-1111"
else:
    HOOK_PATH = "/hook-1111"

PORT = int(os.getenv("PORT", "8080"))

# -------------------- –ü–ê–ú–Ø–¢–¨ –õ–ò–î–û–í --------------------
# –•—Ä–∞–Ω–∏–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ N –ª–∏–¥–æ–≤ –≤ –ø–∞–º—è—Ç–∏ (–±–µ–∑ –ë–î ‚Äî –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–ª—è —Ç–µ—Å—Ç–∞/–ø—Ä–æ–¥–∞–∫—à–Ω–∞ –Ω–∞ –Ω–µ–±–æ–ª—å—à–æ–π –∏—Å—Ç–æ—Ä–∏–∏)
leads = deque(maxlen=1000)

LEAD_KEYWORDS = ("LEAD", "PROJECT REQUEST", "NEW PROJECT REQUEST")

def is_lead_text(text: str) -> bool:
    u = text.upper()
    return any(k in u for k in LEAD_KEYWORDS)

# -------------------- –•–ï–ù–î–õ–ï–†–´ --------------------
async def ping(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    if not update.effective_chat or update.effective_chat.id != CHAT_ID:
        return
    await update.effective_message.reply_text("pong")

async def capture_leads(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    """–õ–æ–≤–∏–º –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è, –ª–æ–≥–∏—Ä—É–µ–º ¬´—Å—ã—Ä—ã–µ¬ª —Ç–µ–∫—Å—Ç—ã –∏ —Å–∫–ª–∞–¥—ã–≤–∞–µ–º –ª–∏–¥—ã –≤ –ø–∞–º—è—Ç—å."""
    if not update.effective_chat or update.effective_chat.id != CHAT_ID:
        return

    msg_text = ""
    if update.effective_message and update.effective_message.text:
        msg_text = update.effective_message.text.strip()
    elif update.effective_message and update.effective_message.caption:
        msg_text = update.effective_message.caption.strip()

    if msg_text:
        log.info("RAW TEXT: %r", msg_text)

        if is_lead_text(msg_text):
            leads.append((now_local(), msg_text))
            # –ú—è–≥–∫–æ–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ, —á—Ç–æ–±—ã –Ω–µ —Å–ø–∞–º–∏—Ç—å:
            try:
                await update.effective_message.reply_text("‚úÖ –õ–∏–¥ –∑–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω")
            except Exception as e:
                log.warning("Cannot reply confirm: %s", e)

async def summary(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    if not update.effective_chat or update.effective_chat.id != CHAT_ID:
        return

    ts = now_local().strftime("%Y-%m-%d %H:%M")
    if not leads:
        text = (
            f"üìä Summary {ts} ‚Äî total: 0\n"
            f"‚Ä¢ No matches.\n"
            f"Hey operators, any more leads? Please double-check!"
        )
    else:
        last_lines = [f"{dt.strftime('%m/%d %H:%M')} ‚Äî {txt}" for dt, txt in list(leads)[-10:]]
        text = f"üìä Summary {ts} ‚Äî total: {len(leads)}\n" + "\n".join(last_lines)

    await ctx.bot.send_message(chat_id=CHAT_ID, text=text)

# -------------------- MAIN --------------------
async def main() -> None:
    app: Application = (
        ApplicationBuilder()
        .token(BOT_TOKEN)
        .rate_limiter(AIORateLimiter())
        .build()
    )

    # –ö–æ–º–∞–Ω–¥—ã
    app.add_handler(CommandHandler("ping", ping))
    app.add_handler(CommandHandler("summary", summary))

    # –õ–æ–≤–∏–º –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è/–ø–æ—Å—Ç—ã –∏ –ø—ã—Ç–∞–µ–º—Å—è –≤—ã–¥–µ—Ä–Ω—É—Ç—å –ª–∏–¥—ã
    app.add_handler(MessageHandler(filters.ALL, capture_leads))

    # –í–µ–±—Ö—É–∫ (–æ—Å—Ç–∞–≤–ª—è–µ–º –∫–∞–∫ —É —Ç–µ–±—è: Railway —Å–ª—É—à–∞–µ—Ç –ø–æ—Ä—Ç, Telegram —Å—Ç—É—á–∏—Ç—Å—è –ø–æ WEBHOOK_URL)
    log.info("Starting webhook server on port %s, path %s", PORT, HOOK_PATH)
    # –í–∞–∂–Ω–æ: –≤–µ–±—Ö—É–∫ –≤ –¢–µ–ª–µ–≥–µ —É–∂–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤—Ä—É—á–Ω—É—é –Ω–∞ WEBHOOK_URL (–º—ã –µ–≥–æ –ù–ï —Å–±—Ä–∞—Å—ã–≤–∞–µ–º –∑–¥–µ—Å—å).
    # –ï—Å–ª–∏ –Ω—É–∂–Ω–æ ‚Äî –º–æ–∂–Ω–æ –æ–¥–∏–Ω —Ä–∞–∑ –≤—ã—Å—Ç–∞–≤–∏—Ç—å:
    # await app.bot.set_webhook(WEBHOOK_URL, drop_pending_updates=True)

    await app.run_webhook(
        listen="0.0.0.0",
        port=PORT,
        url_path=HOOK_PATH,       # –ª–æ–∫–∞–ª—å–Ω—ã–π –ø—É—Ç—å —Å–µ—Ä–≤–µ—Ä–∞
        webhook_url=None,         # –Ω–µ —Ç—Ä–æ–≥–∞–µ–º —É–∂–µ –≤—ã—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã–π –≤ Telegram URL
        stop_signals=None,        # Railway —Å–∞–º —É–±–∏–≤–∞–µ—Ç –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä ‚Äî –Ω–µ –∂–¥—ë–º —Å–∏–≥–Ω–∞–ª–æ–≤
    )

if __name__ == "__main__":
    asyncio.run(main())
