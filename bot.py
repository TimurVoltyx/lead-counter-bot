import asyncio
import logging
import os
from datetime import datetime, timedelta, timezone
from urllib.parse import urlparse

import aiosqlite
import pytz
from telegram import Update
from telegram.constants import ParseMode
from telegram.ext import (
    Application,
    AIORateLimiter,
    CommandHandler,
    ContextTypes,
    MessageHandler,
    filters,
)

# ----------------------- –ö–æ–Ω—Ñ–∏–≥/–ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è -----------------------

BOT_TOKEN = os.getenv("BOT_TOKEN", "").strip()
CHAT_ID = int(os.getenv("CHAT_ID", "0"))
TZ_NAME = os.getenv("TIMEZONE", "America/Los_Angeles")
WEBHOOK_PUBLIC_URL = os.getenv("WEBHOOK_URL", "").strip()  # –Ω–∞–ø—Ä–∏–º–µ—Ä https://.../hook-1111
PORT = int(os.getenv("PORT", "8080"))
LISTEN_ADDR = "0.0.0.0"

# –æ–∫–Ω–æ –æ—Ç—á—ë—Ç–∞ (—Å–µ–≥–æ–¥–Ω—è) –∏ –æ–∫–Ω–æ –æ—á–∏—Å—Ç–∫–∏ (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 3 —á–∞—Å–∞)
CLEAN_WINDOW_HOURS = 3

# –ë–∞–∑–∞
DB_PATH = os.getenv("DB_PATH", "leads.db")

# –ü–∏–Ω–≥–∏-—à—É—Ç–æ—á–∫–∏ –¥–ª—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–≤ (–æ—Å—Ç–∞–≤–ª—è—é –∫–∞–∫ —É —Ç–µ–±—è –±—ã–ª–æ ‚Äî –Ω–µ—Å–∫–æ–ª—å–∫–æ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤)
NUDGE_LINES = [
    "Hey operators, any more leads? Please double-check!",
    "Operators, are you alive or did the leads eat you? Share Volty‚Äôs conversion!",
    "Still on planet Earth, operators? Beam over Volty‚Äôs conversion numbers!",
    "Ping! Just checking if you exist. Also, where‚Äôs Volty‚Äôs conversion?",
]

# –í–∫–ª—é—á–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–∫–æ–º—Ñ–æ—Ä—Ç–Ω–µ–µ
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s | %(levelname)s | %(name)s | %(message)s",
)
log = logging.getLogger("lead-counter-bot")

# –ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å
try:
    TZ = pytz.timezone(TZ_NAME)
except Exception:
    TZ = pytz.utc

# ----------------------- –ö–∞—Ç–µ–≥–æ—Ä–∏–∏/—Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ -----------------------
# –ò–º–µ–Ω–∞ –≤ –æ—Ç—á—ë—Ç–µ
DISPLAY = {
    "angi": "Angi leads",
    "yelp": "Yelp leads",
    "local": "Local",
    "website": "Website",
    "thumbtack": "Thumbtack leads",   # –ù–û–í–û–ï
}

# –§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–æ—Ä—è–¥–æ–∫ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
ORDER = ["angi", "yelp", "local", "website", "thumbtack"]


def classify_source(text: str) -> str | None:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–ª—é—á –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ (angi/yelp/local/website/thumbtack) –∏–ª–∏ None.
    –†–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –ø—Ä–æ—Å—Ç–æ–µ –∏ —É—Å—Ç–æ–π—á–∏–≤–æ–µ –∫ —Ä–µ–≥–∏—Å—Ç—Ä—É.
    """
    if not text:
        return None

    t = text.lower()

    # thumbtack (–ù–û–í–û–ï)
    if "thumbtack" in t or "thumbtack.com" in t or "lead from thumbtack" in t:
        return "thumbtack"

    # angi
    if "angi" in t or "voltyx lead" in t or "angi.com" in t:
        return "angi"

    # yelp
    if "lead from yelp" in t or "yelp" in t:
        return "yelp"

    # local
    if "lead from local" in t:
        return "local"

    # website
    if "website" in t or "check website" in t:
        return "website"

    return None


# ----------------------- –ë–î -----------------------

INIT_SQL = """
CREATE TABLE IF NOT EXISTS leads (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    chat_id INTEGER NOT NULL,
    message_id INTEGER NOT NULL,
    ts_utc INTEGER NOT NULL,
    source TEXT NOT NULL
);
CREATE UNIQUE INDEX IF NOT EXISTS idx_unique_msg ON leads(chat_id, message_id);
CREATE INDEX IF NOT EXISTS idx_ts ON leads(ts_utc);
CREATE INDEX IF NOT EXISTS idx_source ON leads(source);
"""


async def db_init():
    async with aiosqlite.connect(DB_PATH) as db:
        for stmt in INIT_SQL.strip().split(";"):
            s = stmt.strip()
            if s:
                await db.execute(s)
        await db.commit()


async def db_add_lead(chat_id: int, message_id: int, ts_utc: int, source: str) -> bool:
    """
    –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –ª–∏–¥. –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç True, –µ—Å–ª–∏ –≤—Å—Ç–∞–≤–∏–ª–æ—Å—å (–Ω–æ–≤–∞—è –∑–∞–ø–∏—Å—å),
    False ‚Äî –µ—Å–ª–∏ —É–∂–µ –µ—Å—Ç—å —Ç–∞–∫–∞—è —Å–≤—è–∑–∫–∞ chat_id+message_id.
    """
    try:
        async with aiosqlite.connect(DB_PATH) as db:
            await db.execute(
                "INSERT INTO leads(chat_id, message_id, ts_utc, source) VALUES (?, ?, ?, ?)",
                (chat_id, message_id, ts_utc, source),
            )
            await db.commit()
        return True
    except aiosqlite.IntegrityError:
        return False


async def db_counts_for_today(tz: timezone) -> dict:
    """
    –°—á–∏—Ç–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ª–∏–¥–æ–≤ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º –∑–∞ —Å–µ–≥–æ–¥–Ω—è—à–Ω–∏–µ —Å—É—Ç–∫–∏ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ TZ.
    """
    now_local = datetime.now(tz)
    start_local = now_local.replace(hour=0, minute=0, second=0, microsecond=0)
    start_utc = int(start_local.astimezone(timezone.utc).timestamp())
    end_utc = int(now_local.astimezone(timezone.utc).timestamp())

    sql = """
        SELECT source, COUNT(*)
        FROM leads
        WHERE ts_utc BETWEEN ? AND ?
        GROUP BY source
    """
    out: dict = {}
    async with aiosqlite.connect(DB_PATH) as db:
        async with db.execute(sql, (start_utc, end_utc)) as cur:
            async for row in cur:
                out[row[0]] = row[1]
    return out


async def db_clean_last_hours(hours: int) -> int:
    """
    –£–¥–∞–ª—è–µ—Ç –∑–∞–ø–∏—Å–∏ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ N —á–∞—Å–æ–≤. –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —á–∏—Å–ª–æ —É–¥–∞–ª—ë–Ω–Ω—ã—Ö —Å—Ç—Ä–æ–∫.
    """
    now_utc = int(datetime.now(timezone.utc).timestamp())
    threshold = now_utc - hours * 3600
    async with aiosqlite.connect(DB_PATH) as db:
        cur = await db.execute("DELETE FROM leads WHERE ts_utc >= ?", (threshold,))
        await db.commit()
        return cur.rowcount


# ----------------------- –•—ç–Ω–¥–ª–µ—Ä—ã -----------------------

async def cmd_ping(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_chat and update.effective_chat.id == CHAT_ID:
        await update.effective_message.reply_text("pong")


async def cmd_summary(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not update.effective_chat or update.effective_chat.id != CHAT_ID:
        return

    counts = await db_counts_for_today(TZ)

    # —Ñ–æ—Ä–º–∏—Ä—É–µ–º –ø–æ–ª–Ω—ã–π —Å–ø–∏—Å–æ–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–π (–¥–∞–∂–µ –µ—Å–ª–∏ 0)
    lines = []
    total = 0
    for key in ORDER:
        c = counts.get(key, 0)
        total += c
        lines.append(f"‚Ä¢ {DISPLAY[key]}: {c}")

    now_local = datetime.now(TZ)
    title = f"üìä Summary {now_local.strftime('%Y-%m-%d %H:%M')} ‚Äî total: {total}"

    txt = title + "\n" + "\n".join(lines) + "\n" + f"\n{NUDGE_LINES[now_local.minute % len(NUDGE_LINES)]}"
    await update.effective_message.reply_text(txt)


async def cmd_clean(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –û—á–∏—â–∞–µ—Ç –ª–∏–¥—ã –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 3 —á–∞—Å–∞ (CLEAN_WINDOW_HOURS).
    """
    if not update.effective_chat or update.effective_chat.id != CHAT_ID:
        return

    deleted = await db_clean_last_hours(CLEAN_WINDOW_HOURS)
    await update.effective_message.reply_text(
        f"üßπ Cleared {deleted} rows from the last {CLEAN_WINDOW_HOURS} hours."
    )


async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –û—Ç—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ª—é–±—ã–µ –Ω–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –≥—Ä—É–ø–ø–µ: –ø—ã—Ç–∞–µ–º—Å—è —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –ª–∏–¥, —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å,
    –∏ –æ—Ç–≤–µ—Ç–∏—Ç—å ‚Äò‚úÖ Lead counted‚Äô.
    """
    msg = update.effective_message
    chat = update.effective_chat

    # —Ç–æ–ª—å–∫–æ —É–∫–∞–∑–∞–Ω–Ω—ã–π —á–∞—Ç
    if not chat or chat.id != CHAT_ID or not msg or not msg.text:
        return

    text = msg.text
    source = classify_source(text)
    if not source:
        # –Ω–µ –ø–æ—Ö–æ–∂–µ –Ω–∞ –ª–∏–¥ ‚Äî –ø—Ä–æ—Å—Ç–æ –≤—ã—Ö–æ–¥–∏–º
        return

    ts_utc = int(datetime.now(timezone.utc).timestamp())
    ok = await db_add_lead(chat.id, msg.message_id, ts_utc, source)
    if ok:
        try:
            await msg.reply_text("‚úÖ Lead counted")
        except Exception:
            pass


# ----------------------- Webhook/–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ -----------------------

def parse_webhook_path(public_url: str) -> str:
    """
    –ò–∑–≤–ª–µ–∫–∞–µ–º path –∏–∑ PUBLIC_URL. –ï—Å–ª–∏ –ø—É—Å—Ç–æ ‚Äî –¥–µ—Ñ–æ–ª—Ç /hook-1111.
    """
    if not public_url:
        return "/hook-1111"
    try:
        p = urlparse(public_url)
        return p.path if p.path else "/hook-1111"
    except Exception:
        return "/hook-1111"


async def on_startup(app: Application):
    await db_init()


def build_application() -> Application:
    if not BOT_TOKEN:
        raise RuntimeError("BOT_TOKEN is not set")

    application = (
        Application.builder()
        .token(BOT_TOKEN)
        .rate_limiter(AIORateLimiter())
        .post_init(on_startup)
        .build()
    )

    # –ö–æ–º–∞–Ω–¥—ã
    application.add_handler(CommandHandler("ping", cmd_ping, filters=filters.Chat(CHAT_ID)))
    application.add_handler(CommandHandler("summary", cmd_summary, filters=filters.Chat(CHAT_ID)))
    application.add_handler(CommandHandler("clean", cmd_clean, filters=filters.Chat(CHAT_ID)))  # –ù–û–í–û–ï

    # –°–æ–æ–±—â–µ–Ω–∏—è –≤ –≥—Ä—É–ø–ø–µ
    application.add_handler(MessageHandler(filters.Chat(CHAT_ID) & filters.TEXT, handle_message))

    return application


def main():
    app = build_application()

    # webhook
    path = parse_webhook_path(WEBHOOK_PUBLIC_URL)
    log.info(
        "Running webhook at %s:%s path=%s, public_url=%s",
        LISTEN_ADDR,
        PORT,
        path,
        WEBHOOK_PUBLIC_URL or "(NOT SET!)",
    )

    # run_webhook —Å–∞–º –≤—ã—Å—Ç–∞–≤–∏—Ç setWebhook
    app.run_webhook(
        listen=LISTEN_ADDR,
        port=PORT,
        webhook_url=WEBHOOK_PUBLIC_URL if WEBHOOK_PUBLIC_URL else None,
        secret_token=None,
        allowed_updates=["message", "edited_message"],
        url_path=path,  # safe: PTB21 –∏–≥–Ω–æ—Ä–∏—Ç, –∫–æ–≥–¥–∞ —É–∫–∞–∑–∞–Ω webhook_url
    )


if __name__ == "__main__":
    main()
