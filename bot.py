# bot.py
# =======
# –¢—Ä–µ–±—É—é—Ç—Å—è env-–ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ: BOT_TOKEN, CHAT_ID, TIMEZONE, WEBHOOK_URL
# requirements.txt: python-telegram-bot[rate-limiter,job-queue,webhooks]==21.4, aiosqlite, pytz

import os
import logging
from urllib.parse import urlparse
from datetime import datetime, timedelta, timezone

from telegram import Update
from telegram.ext import (
    Application, ApplicationBuilder,
    CommandHandler, MessageHandler, ContextTypes, filters
)

# ---------- –õ–û–ì–ò ----------
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s | %(levelname)s | %(name)s | %(message)s"
)
log = logging.getLogger("lead-counter-bot")

# ---------- ENV ----------
BOT_TOKEN   = os.getenv("BOT_TOKEN", "").strip()
CHAT_ID_RAW = os.getenv("CHAT_ID", "").strip()
TIMEZONE    = os.getenv("TIMEZONE", "America/Los_Angeles").strip()
WEBHOOK_URL = os.getenv("WEBHOOK_URL", "").strip()  # –Ω–∞–ø—Ä–∏–º–µ—Ä: https://lead-counter-bot-production.up.railway.app/hook-1111

if not BOT_TOKEN:
    raise RuntimeError("ENV BOT_TOKEN is empty")
if not CHAT_ID_RAW:
    raise RuntimeError("ENV CHAT_ID is empty")
try:
    CHAT_ID = int(CHAT_ID_RAW)  # –¥–ª—è —Å—É–ø–µ—Ä–≥—Ä—É–ø–ø –±—É–¥–µ—Ç –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–π
except ValueError:
    raise RuntimeError("ENV CHAT_ID must be integer (e.g. -1002485440713)")

if not WEBHOOK_URL:
    raise RuntimeError("ENV WEBHOOK_URL is empty (like https://.../hook-1111)")

# ---------- –í–†–ï–ú–ï–ù–ù–ê–Ø –ó–û–ù–ê ----------
try:
    import zoneinfo
    TZ = zoneinfo.ZoneInfo(TIMEZONE)
except Exception:
    TZ = timezone.utc
    log.warning("Could not load timezone '%s', fallback to UTC", TIMEZONE)

# ---------- –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–û–ï ----------
def now_local():
    return datetime.now(TZ)

# –ü—Ä–æ—Å—Ç–∞—è –∑–∞–≥–ª—É—à–∫–∞ –¥–ª—è /summary ‚Äî –≤–µ—Ä–Ω—ë—Ç 0 –∏ –ø–∏–Ω–≥–∞–Ω—ë—Ç –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–≤
async def cmd_summary(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    # —Ñ–∏–ª—å—Ç—Ä—É–µ–º –ø–æ –Ω–∞—à–µ–º—É —á–∞—Ç—É
    if update.effective_chat and update.effective_chat.id != CHAT_ID:
        return

    ts = now_local().strftime("%Y-%m-%d %H:%M")
    text = (
        f"üìä Summary {ts} ‚Äî total: 0\n"
        f"‚Ä¢ No matches.\n"
        f"Hey operators, any more leads? Please double-check!"
    )
    await ctx.bot.send_message(chat_id=CHAT_ID, text=text)

# –ü—Ä–æ—Å—Ç–æ–π ping
async def cmd_ping(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    if update.effective_chat and update.effective_chat.id != CHAT_ID:
        return
    await ctx.bot.send_message(chat_id=CHAT_ID, text="pong")

# ---------- –ì–õ–ê–í–ù–´–ô –û–¢–õ–ê–î–û–ß–ù–´–ô –û–ë–†–ê–ë–û–¢–ß–ò–ö ----------
# –õ–æ–≤–∏—Ç –í–°–ï –∞–ø–¥–µ–π—Ç—ã –∏–∑ –Ω–∞—à–µ–≥–æ —á–∞—Ç–∞. –ï—Å–ª–∏ –±–æ—Ç –Ω–∏—á–µ–≥–æ –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç ‚Äî –∞–ø–¥–µ–π—Ç—ã –Ω–µ –¥–æ—Ö–æ–¥—è—Ç.
async def debug_all(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    # –æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –Ω–∞—à–∏–º —á–∞—Ç–æ–º, —á—Ç–æ–±—ã –Ω–µ —à—É–º–µ—Ç—å
    if update.effective_chat and update.effective_chat.id != CHAT_ID:
        return

    try:
        payload = update.to_dict()
        log.info("RAW UPDATE: %s", payload)
    except Exception as e:
        log.exception("Failed to dump update: %s", e)

    # –ü–æ–∫–∞–∂–µ–º, —á—Ç–æ –±–æ—Ç —Ä–µ–∞–ª—å–Ω–æ –≤–∏–¥–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ
    try:
        if update.effective_message:
            await update.effective_message.reply_text("–õ—â–≤–∏—Ç–µ –µ–≥–æ!")
        else:
            # –µ—Å–ª–∏ –Ω–µ—Ç message (–Ω–∞–ø—Ä–∏–º–µ—Ä callback_query –∏ —Ç.–ø.), —à–ª–µ–º –æ—Ç–¥–µ–ª—å–Ω—ã–º send_message
            await ctx.bot.send_message(chat_id=CHAT_ID, text="–Ø –≤–∏–∂—É –∞–ø–¥–µ–π—Ç (–Ω–µ message)!")
    except Exception as e:
        log.exception("Failed to reply in debug_all: %s", e)

# ---------- MAIN ----------
def main():
    log.info("Starting bot, CHAT_ID=%s, TZ=%s", CHAT_ID, TIMEZONE)

    app: Application = ApplicationBuilder().token(BOT_TOKEN).build()

    # –ö–æ–º–∞–Ω–¥—ã
    app.add_handler(CommandHandler("summary", cmd_summary))
    app.add_handler(CommandHandler("ping", cmd_ping))

    # –û–¢–õ–ê–î–û–ß–ù–´–ô –•–ï–ù–î–õ–ï–† ‚Äî –í–°–Å, –ß–¢–û –ü–†–ò–•–û–î–ò–¢
    app.add_handler(MessageHandler(filters.ALL, debug_all))

    # ---- WEBHOOK ----
    # Railway —Å–ª—É—à–∞–µ—Ç –ø–æ—Ä—Ç 8080. path –±–µ—Ä—ë–º –∏–∑ WEBHOOK_URL (/hook-xxxx)
    parsed = urlparse(WEBHOOK_URL)
    hook_path = parsed.path if parsed.path else "/hook"
    # –í–∞–∂–Ω–æ–µ: set_webhook –¥–µ–ª–∞–µ—Ç —Å–∞–º–∞ PTB –≤–Ω—É—Ç—Ä–∏ run_webhook
    log.info("Running webhook at 0.0.0.0:8080 path=%s, public_url=%s", hook_path, WEBHOOK_URL)

    app.run_webhook(
        listen="0.0.0.0",
        port=8080,
        url_path=hook_path.lstrip("/"),
        webhook_url=WEBHOOK_URL
    )

if __name__ == "__main__":
    main()
